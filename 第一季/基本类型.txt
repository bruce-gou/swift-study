基本类型

Int
Float,Double
Boolean
String
Tuple


    整型：
	显式声明  var a: Int = 80;
	Int.max: 显示整型可以存储的最大值
	Int.min: 显示整型可以存储的最小值

	也可以使用 二进制 八进制 十六进制的方式给 整型赋值
	var a: Int = 0b10001
	var b: Int = 0o21
	var c: Int = 0x11

	var d = 1_000_000 //结果 还是 1000000， '_' 在这里没有什么意义，只是方便数位数而已

	UInt存储的数据是 Int 的2倍，没有负数 
	var a: UInt = 80;
	UInt.max: 最大值
	UInt.min: 0


    浮点数：
	Float 采用32位表示，Double采用64位表示，在计算机底层采用不同位数来表示浮点数，它们的差异就是浮点数精度的差异。
	  var a: Float = 3.1415926 //3.141593  单精度浮点数，没有存下7位小数
	  var b: Double = 3.1415926 //3.1415926 双精度浮点数，存下了7位小数
	也可以这样：
	  var c = 3.1415926 // 3.1415926

	科学计数法：
	  var a = 1.25e10 // 表示 1.25 乘以10 的10次方
	  var b = 1.25e-2 // 0.0125 表示 1.25 乘以10的-2次方

	  var c = 1.00_03 // 1.0003

	类型转换：
	swift 中没有自动转换类型
	  var a: UInt16 = 1500
	  var b: UInt8 = 100
	  var c = a + b //会报错，类型不一样
	  var c = UInt8(a) + b //报错，没有足够的符号来表示，存不下
	  var c = UInt16(b) + a // 1600 正确

	  在浮点类型中也一样
	  var a: Float = 0.3
	  var b: Double = 0.4
	  a+b //报错
	  Float(b) + a //正确 
	  Double(a) + b //正确

	  var x: Float = 3 //正确
	  var y: Int = 3.0 //错误
	  或者
	  var y: Int = Int(3.0) //这样是可以的

	  例如：
	    let a = 3
	    let b = 0.1415926 //这2个直接相加会报错，需要先转后类型
	    let pi = Double(a) + b
	
	  在ios 开发中还会有一个 CGFloat 的浮点数

	

    布尔类型和简单if语句：布尔值小写
	var a: Bool = true
	var b = false
	if 语句可以不需要小括号，小括号表示优先级
	if a{
	  print("I'm True")
	}else if b{
	  print("I'm False")
	}else if 3 + 4 == 7{
	  print("7")
	}
	在其他语言中 1 可以表示true，0可以表示 false,在swift 中是不可以的


    元组：Tuple
	元组中可以存储不同的数据类型
	var a = (5, 2, "Not", false)
	
	元组也可以显示的指定类型
	var b: (Int, Int, String) = (1, 2, "str")

	解包：
	  var a = (5, "Not", false)
	  var (x, y, z) = a // x,y,z 则各自对应一个值
	  
	  元组中不需要解包的数据可以用 "_" 表示
	  var (x, _, _) = a

	取值：
	  var a = (5, "Not", false)
	  a.0 // 5
	  a.1 // "Not"
	  a.2 // false

	也可以在 定义元组的时候 给每一个分量 定义一个名字：
	  var a = ( x:1, y:"str")
	  a.x // 1
	  a.y // "str"

	也可以在声明类型的时候 加上名字，就可以直接赋值：
	  var a: (x: Int, y: String) = ( 1,"str")
	  a.x // 1
	  a.y // "str"


    

	
	
	
	

	  
	



















	
	
	
	
